package de.rwth.modeling.simulator;

// do not change this component
// it is here for reference only
// it represents an interface to the simulator
// make sure the actual Autopilot component
// has exactly the same input and output ports
component AutopilotAdapter {
  port
    // length of simulation time frame
    // e.g. when simulation frequency is 200 Hz
    // this value will be equal to 5ms
    in  Q (0.0 s : 0.001 s : 1.0 s)              timeIncrement,

    // current velocity
    in  Q (0.0 m/s : 0.01 m/s : oo m/s)          currentVelocity,

    // current vehicle's position
    in  Q (-oo m : 0.01 m : oo m)                x,
    in  Q (-oo m : 0.01 m : oo m)                y,

    // orientation angle (also sometimes called yaw angle) in radians
    // it is measured from from the positive Y axis direction
    // to the actual vehicle's direction counter-clockwise
    // Example 1: vehicle has direction (-1.0; -1.0)
    // compass = 0.25 * PI (positive)
    // Example 2: vehicle has direction (1.0; 0.0) i.e. it is directed along the X axis
    // compass = -0.5 * PI (negative)
    in  Q (-oo : 0.001 : oo)                     compass,

    // current engine actuation
    in  Q (0.0 : 0.001 : 2.5)                    currentEngine,

    // current steering actuation
    // negative value: left turn
    // positive value: right turn
    in  Q (-0.785 : 0.001 : 0.785)               currentSteering,

    // current brakes actuation
    in  Q (0.0 : 0.001 : 3.0)                    currentBrakes,

    // planned trajectory (with look ahead 100-200m)
    // represented by two arrays trajectory_x[] and trajectory_y[]
    // which both have length trajectory_length
    in  Z (0 : 100)                              trajectory_length,
    in  Q (-oo m : 0.01 m : oo m) ^ {1,100}      trajectory_x,
    in  Q (-oo m : 0.01 m : oo m) ^ {1,100}      trajectory_y,

    // output actuation commands
    out Q (0.0 : 0.001 : 2.5)                    engine,
    out Q (-0.785 : 0.001 : 0.785)               steering,
    out Q (0.0 : 0.001 : 3.0)                    brakes;
}
